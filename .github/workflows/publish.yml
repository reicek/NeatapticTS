name: Publish packages

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

on:
  release:
    types: [published]
  push:
    branches: [develop]
    paths-ignore:
      - 'docs/**'
      - '.github/**'
      - 'README.md'
  workflow_dispatch:
    inputs:
      run_publish:
        description: 'Whether to actually publish packages'
        required: false
        default: 'true'
      release_tag:
        description: 'Optional tag to publish (metadata only)'
        required: false
  workflow_call:
    inputs:
      run_publish:
        description: 'Whether to actually publish packages'
        required: false
        type: string
        default: 'true'
      release_tag:
        description: 'Optional tag to publish (metadata only)'
        required: false
        type: string
    secrets:
      NPM_TOKEN:
        description: 'NPM automation/publish token'
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      RUN_PUBLISH: ${{ inputs.run_publish || github.event.inputs.run_publish || 'true' }}
      RELEASE_TAG: ${{ inputs.release_tag || github.event.inputs.release_tag || '' }}
      LOOP_SKIP: 'false'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use npm cache
        if: ${{ env.LOOP_SKIP == 'false' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup Node (npmjs)
        if: ${{ env.LOOP_SKIP == 'false' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
          always-auth: true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install dependencies
        if: ${{ env.LOOP_SKIP == 'false' }}
        run: npm ci

      - name: Test
        if: ${{ env.LOOP_SKIP == 'false' }}
        run: npm test

      - name: Ensure unique version (auto bump patch if exists)
        if: ${{ env.LOOP_SKIP == 'false' && env.RUN_PUBLISH == 'true' && github.event_name != 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          PKG_NAME=$(node -p "require('./package.json').name")
          CURR_VER=$(node -p "require('./package.json').version")
          echo "Current version: $CURR_VER"
          if npm view "$PKG_NAME@$CURR_VER" version >/dev/null 2>&1; then
            echo "Version exists on registry; bumping patch.";
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            npm version patch -m "chore(release): %s [skip ci]"
            git push origin HEAD --follow-tags
          else
            echo "Version $CURR_VER is new.";
          fi

      - name: Build
        if: ${{ env.LOOP_SKIP == 'false' }}
        run: npm run build

      - name: Debug npm auth and package
        if: ${{ env.LOOP_SKIP == 'false' && env.RUN_PUBLISH == 'true' }}
        run: |
          echo "npm registry: $(npm config get registry)"
          echo "npm whoami:"; npm whoami || echo "not authenticated"
          echo "package:" $(node -p "require('./package.json').name + '@' + require('./package.json').version")
          echo "masked ~/.npmrc:";
          if [ -f ~/.npmrc ]; then sed -E 's/(:_authToken=).*/\1***REDACTED***/' ~/.npmrc || true; else echo "no ~/.npmrc"; fi

      - name: "Guard npm auth"
        if: ${{ env.LOOP_SKIP == 'false' && env.RUN_PUBLISH == 'true' }}
        run: |
          set -e
          WHOAMI=$(npm whoami 2>/dev/null || echo "")
          if [ -z "$WHOAMI" ]; then
            echo "ERROR: npm not authenticated (whoami empty)."; exit 1; fi
          echo "Authenticated as: $WHOAMI"
          if [ "$WHOAMI" != "reicek" ]; then
            echo "ERROR: expected user 'reicek' got '$WHOAMI'. Use correct NPM_TOKEN."; exit 1; fi

      - name: Publish to npm
        if: ${{ env.LOOP_SKIP == 'false' && env.RUN_PUBLISH == 'true' }}
        run: npm publish --access public

      - name: Setup Node (GitHub Packages)
        if: ${{ env.LOOP_SKIP == 'false' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/
          always-auth: true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to GitHub Packages (scoped)
        if: ${{ env.LOOP_SKIP == 'false' && env.RUN_PUBLISH == 'true' }}
        run: npm publish --registry https://npm.pkg.github.com/

      - name: Read package version
        if: ${{ env.LOOP_SKIP == 'false' && env.RUN_PUBLISH == 'true' }}
        id: pkgver
        run: |
          echo "version=$(node -p \"require('./package.json').version\")" >> $GITHUB_OUTPUT

      - name: Ensure git user (for tagging)
        if: ${{ env.LOOP_SKIP == 'false' && env.RUN_PUBLISH == 'true' && github.event_name != 'release' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Ensure tag exists (vX.Y.Z)
        if: ${{ env.LOOP_SKIP == 'false' && env.RUN_PUBLISH == 'true' && github.event_name != 'release' }}
        run: |
          set -e
          VER=${{ steps.pkgver.outputs.version }}
          TAG="v$VER"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "Local tag $TAG already exists."
          else
            echo "Creating tag $TAG";
            git tag -a "$TAG" -m "chore(release): $TAG"
          fi
          git push origin "refs/tags/$TAG" || echo "Tag push may already exist."
          if git ls-remote --tags origin "$TAG" | grep -q "refs/tags/$TAG$"; then
            echo "Remote tag $TAG already exists. Skipping push."
          else
            git push origin "refs/tags/$TAG"
          fi
      - name: Create GitHub Release
        if: ${{ env.LOOP_SKIP == 'false' && env.RUN_PUBLISH == 'true' && github.event_name != 'release' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.pkgver.outputs.version }}
          release_name: v${{ steps.pkgver.outputs.version }}
          body: |
            Automated release for version v${{ steps.pkgver.outputs.version }}.
            Generated by publish workflow.
          draft: false
          prerelease: false


      - name: Summary
        run: |
          echo "Publish workflow completed. LOOP_SKIP=${{ env.LOOP_SKIP }}"
