ES2023 Migration Plan (Consolidated)
====================================

Objective
---------
Modernize the codebase to idiomatic ES2023 (already targeted in `tsconfig.json`) while maintaining or improving performance, memory efficiency, and clarity for very large NEAT networks.

Legend
------
QW = Quick win (mechanical)  |  OPT = Optional readability/ergonomic  |  BENCH = Requires benchmark  |  DEBT = Larger refactor / architectural

Baseline Constraints
--------------------
1. Evolutionary inner loops are performance critical (population sorting, mutation, speciation). Avoid extra allocations there unless proven neutral.  
2. Memory tracking must remain lightweight; optional GC-friendly features go behind flags.  
3. Maintain existing public API & test expectations; syntactic changes must be behavior-preserving unless explicitly flagged.

Phase Roadmap
-------------
Phase 0 (Baseline)  : Metrics capture (tests, coverage, benchmarks, memory stats).  
Phase 1 (Mechanical): Syntax upgrades (toSorted, optional chaining, spreads, numeric separators selective, structured clone util).  
Phase 2 (Lint)      : Enforce style (optional chaining, nullish coalescing) + codemod cleanup.  
Phase 3 (Imports)   : Replace safe `require` with top-level `import`, annotate intentional dynamic loads, manage cycles.  
Phase 4 (Memory)    : WeakRef-based tracking (flagged), prep for very large networks.  
Phase 5 (Selective) : Evaluate & adopt non-mutating array helpers (`toReversed`, `with`, `findLast`, etc.) & `.at(-1)` where low risk.  
Phase 6 (Diagnostics): Error cause propagation, structuredClone adoption unification, innovation key clarity.  
Phase 7 (Docs)      : Documentation, contributor guidelines.  
Phase 8 (Automation): Continuous ES2023 usage validation (CI + Copilot guidance).  
Ongoing             : Weekly regression benchmarks & memory churn tests.

Success Metrics
---------------
- Perf: Generation time delta <= ±1% vs baseline (95th percentile).  
- Memory: Reduced retained objects in churn test when `enableWeakTracking`=true (qualitative GC improvement noted).  
- Readability: Zero legacy guard chains; dynamic `require` usages reduced >=80%, remaining annotated.  
- Stability: All tests green; coverage not lower than baseline.  
- Tooling: Lint rules active & passing for target patterns.

Risk & Mitigation
-----------------
Performance regressions (mitigate with phased benchmarks).  
Import cycles (introduce type-only imports, isolate helpers).  
GC nondeterminism with WeakRef (feature-flag, doc disclaimers).  
Over-modernization in hot loops (bench gating, revert path).  

Roll-Back Strategy
------------------
Revert offending phase commit(s) while retaining earlier mechanical improvements. Keep baseline tag for quick diff.

Ownership (Placeholder)
-----------------------
P0–P2: Core maintainer A; P3: Maintainer B; P4: Memory specialist C; P5+: Shared review.

Feature Modernization Matrix
----------------------------
| Area | Current Pattern | Target ES2023 / TS Feature | Phase | Notes |
|------|-----------------|----------------------------|-------|-------|
| Clone+Sort | `slice().sort()` | `toSorted()` | 1 | Only where result not mutated later |
| Guard Chains | `a && a.b && a.b.c` | `a?.b?.c` | 1 | Mechanical codemod |
| Dynamic require | `require('./x')` | `import` / annotated dynamic | 3 | Cycle audit needed |
| JSON deep clone fallback | local logic | central `safeStructuredClone` | 1/2 | Utility reuse |
| Last element | `arr[arr.length-1]` | `arr.at(-1)` | 5 | Skip hot loops unless neutral |
| Large literals | `4294967296` | `4_294_967_296` | 1/5 | Clarity only |
| Innovation key formula | `* 100000 +` | `* 100_000 +` | 6 | Add capacity comment |
| Spread vs Object.assign | `Object.assign({}, o)` | `{ ...o }` | 1 | Already supported |
| Array cloning before replace | manual | `with()` | 5 | Only if immutability beneficial |
| Reverse+find patterns | manual reverse loops | `findLast` / `findLastIndex` | 5 | None detected yet |
| Error wrapping | `throw new Error(msg)` | `new Error(msg,{cause:e})` | 6 | Only when rethrowing |
| Network tracking | Array registry | WeakRef list flag | 4 | Preserve order via compaction |
| Constant tables | plain objects | `as const` + `satisfies` | 5 | Strengthen typing |
| Mutation operator stats | Map reuse | Keep / optional separators | 6 | N/A |

Detailed Phase Actions
----------------------
Phase 0: Baseline
	- Run tests, record coverage (% lines).  
	- Bench: population sizes (100, 1k, 5k) on representative network depth; capture avg & p95 generation time.  
	- Memory: Run churn scenario (create/destroy networks) gather peak RSS & memoryStats snapshot.  
	- Commit tag `baseline-ES2023-pre` + baseline report file.

Phase 1: Mechanical Upgrades
	- Apply toSorted change in `neat.evaluate.ts` (distance matrix).  
	- Replace `Object.assign({}, _slabPoolMetrics)` in `network.slab.ts`.  
	- Optional chaining rewrites (mutation/species/telemetry lines enumerated).  
	- Introduce `utils/clone.ts` exporting `safeStructuredClone(value)` using native `structuredClone` fallback. Refactor `network.stats.ts` to use it.  
	- Numeric separators for: `100000` (compat), `65536` (loss scale), `4294967296` (RNG divisor) — gate behind readability check.  
	- Commit & test; annotate bench delta.

Phase 2: Lint & Style Enforcement
	- Add ESLint config (or extend) with: `prefer-optional-chain`, `prefer-nullish-coalescing`, custom rule docs.  
	- Run autofix; convert warnings to errors once clean.  
	- Add codemod script (optional) for future guard chain regressions.  

Phase 3: Import Modernization
	- Inventory `require` sites; classify A/B/C (always, conditional, cyclic-risk).  
	- Convert class A first (methods, node, network exports).  
	- For cyclic conflicts: extract type-only or utility submodules.  
	- Add comments `// intentional dynamic load` where retained.  
	- Re-benchmark after bulk conversion (ensure bundle/test unaffected).  

Phase 4: WeakRef Tracking Feature
	- Add `enableWeakTracking` to `config.ts` (default false).  
	- Implement `utils/memoryWeak.ts` (WeakRef list + compaction).  
	- Integrate into `memoryStats()` when no explicit networks param & flag true.  
	- Docs: memory section update + limitations (non-deterministic GC).  
	- Churn benchmark before/after (qualitative).  

Phase 5: Selective Advanced Features
	- Evaluate candidates for `.at(-1)`, `findLast`, `with`, `toReversed`.  
	- Skip or revert any change causing measurable regression (>1% in micro bench).  
	- Add guidance to CONTRIBUTING: prefer non-mutating forms only outside hot loops.  

Phase 6: Diagnostics & Robustness
	- Add `cause` to rethrows where we wrap & rethrow (currently minimal).  
	- Standardize innovation key formula with separators + capacity comment + optional bounds assert.  
	- Unify deep clone usage to `safeStructuredClone`.  
	- Optional: error telemetry improvements using WeakMap caches (memoize last N operator decisions).  

Phase 7: Documentation & Wrap-Up
	- README: memory flag docs, ES2023 feature adoption summary.  
	- Changelog: highlight non-breaking modernization & new optional flag.  
	- Close tracking issue after final benchmark sign-off.

Phase 8: Automation & PR Enforcement
	Goal: Prevent regressions by automatically validating ES2023 patterns on every PR and guiding contributors (humans + Copilot) toward approved idioms.
	Steps:
		8.1 Add GitHub Action `.github/workflows/ES2023-validation.yml` triggered on `pull_request` & `push` to main branches.
		8.2 Implement `scripts/validate-ES2023.mjs` performing fast checks:
			- Fail on new occurrences of disallowed guard chains (`/\b[a-zA-Z0-9_]+ && [a-zA-Z0-9_]+\.[a-zA-Z0-9_]+ &&/`).
			- Fail on `slice().sort(` where not whitelisted (expect `toSorted`).
			- Warn (not fail) on `arr.length - 1` if candidate for `.at(-1)` outside hot paths (hot path list in allowlist JSON).
			- Fail on `require(` outside allowlist (e.g. telemetry dynamic loads) unless line contains `intentional dynamic load` comment.
			- Fail on `Object.assign({},` (prefer spread) except in generated code (add directive comment to bypass: `// allow-assign-clone`).
		8.3 Extend ESLint rules (`no-restricted-syntax` / `no-restricted-properties`) mirroring script checks for local dev feedback.
		8.4 Add coverage check step ensuring not below baseline recorded in Phase 0 (store baseline in JSON for script to read).
		8.5 Publish summary artifact listing violations with suggested fixes (annotate diff via GitHub Actions workflow commands).
		8.6 Introduce `.github/copilot-instructions.md` informing Copilot of preferred patterns (optional chaining, toSorted, avoid dynamic require, use safeStructuredClone, etc.).
		8.7 Add README badge indicating ES2023 compliance (workflow status).
	Exit Criteria: Action passes on clean main; intentional dynamic loads annotated; failing examples demonstrate correct feedback.

Automation Tooling Notes:
	- Validation script kept dependency-free (pure Node, regex scanning) for speed (<1s on typical codebase size).
	- Provide allowlist file: `config/ES2023-allowlist.json` enumerating acceptable legacy patterns (regex array). Contributors can extend with justification PR.
	- CI matrix can include Node LTS + latest to ensure new features (structuredClone) remain available.
	- Optional: Add a weekly scheduled run to detect drift (e.g., dependencies introducing CommonJS shims) and open an issue automatically.

Copilot Guidance (Summary – full text in `copilot-instructions.md`):
	1. Prefer non-mutating array helpers when cloning (`toSorted`, `toReversed`).
	2. Use optional chaining / nullish coalescing instead of guard chains.
	3. Avoid dynamic `require`; if necessary add comment `intentional dynamic load`.
	4. Use `safeStructuredClone` for deep copies; avoid raw JSON clone unless necessary.
	5. Use `arr.at(-1)` where retrieving last element outside hot loops.
	6. Add numeric separators to large readability-critical literals.
	7. Keep hot loop optimizations (mutating methods) unless change is benchmark-neutral.

Future Enhancements (Post Phase 8):
	- AST-based codemod auto-fixes triggered via a bot comment when violations found.
	- PR comment summarizing ES2023 deltas (new `require`, new legacy patterns) for reviewer focus.

Weak Structures Strategy (Integrated)
-------------------------------------
Tracking Registry Options:
	- Legacy array (ordered, strong refs).  
	- WeakRef list (ordered until GC) + compaction on read (Phase 4).  
	- Not adopting WeakSet (non-iterable) nor enumerating WeakMap (impossible) for registry.

Implementation Sketch (Phase 4)
```ts
// utils/memoryWeak.ts
const _tracked: Array<WeakRef<Network>> = [];
export function register(net: Network){ _tracked.push(new WeakRef(net)); }
export function snapshot(): Network[]{
	const alive: Network[] = []; let write=0;
	for (let i=0;i<_tracked.length;i++) { const n=_tracked[i].deref(); if (n){ alive.push(n); _tracked[write++]=_tracked[i]; } }
	_tracked.length = write; return alive;
}
```
Integrated into `memoryStats()` when `config.enableWeakTracking` true.

Deferred / BENCH Items
----------------------
- Non-mutating array replacements in hot loops.  
- RNG divisor change to constant reciprocal multiply.  
- Adding FinalizationRegistry (diagnostic only).  

Initial Refactor Task List (Actionable Now)
------------------------------------------
1. toSorted in `neat.evaluate.ts`. [QW]
2. Spread instead of Object.assign in `network.slab.ts`. [QW]
3. Optional chaining rewrites (mutation/species/telemetry hotspots). [QW]
4. Introduce `safeStructuredClone` and refactor `network.stats.ts`. [QW]
5. Numeric separators (compat / loss scale / RNG). [OPT]
6. Prepare lint config scaffold (Phase 2). [OPT]

Quality Gates per Phase
-----------------------
Build (tsc) | Lint | Tests | Bench delta | Memory snapshot — all must PASS / within tolerance before proceeding to next phase.

Completion Criteria
-------------------
All phases executed, metrics within targets, documentation updated, and no open regression issues tagged `ES2023-migration`.

End of consolidated plan.


